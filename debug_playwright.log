FLASK APP STARTED: TESTING = False ENV = {'COLORTERM': 'truecolor', 'PYTHON_SHA256': '849da87af4df137710c1796e276a955f7a85c9f971081067c8f565d15c352a09', 'TERM_PROGRAM_VERSION': '1.97.0', 'HOSTNAME': 'f11cc52a690f', 'PYTHON_VERSION': '3.11.12', 'SSH_AUTH_SOCK': '/root/.windsurf-server/.69a900001328c5e276063fc33dcff89076073a54-ssh-auth.sock', 'PWD': '/app', 'FLASK_RUN_RELOAD': 'true', 'VSCODE_GIT_ASKPASS_NODE': '/root/.windsurf-server/bin/69a900001328c5e276063fc33dcff89076073a54/node', 'HOME': '/root', 'LANG': 'C.UTF-8', 'REMOTE_CONTAINERS': 'true', 'GPG_KEY': 'A035C8C19219BA821ECEA86B64E628F8D684696D', 'GIT_ASKPASS': '/root/.windsurf-server/bin/69a900001328c5e276063fc33dcff89076073a54/extensions/git/dist/askpass.sh', 'VSCODE_GIT_ASKPASS_EXTRA_ARGS': '', 'TERM': 'xterm-256color', 'VSCODE_GIT_IPC_HANDLE': '/tmp/vscode-git-0c9406c158.sock', 'FLASK_APP': 'app.py', 'SHLVL': '1', 'PAGER': 'cat', 'VSCODE_GIT_ASKPASS_MAIN': '/root/.windsurf-server/bin/69a900001328c5e276063fc33dcff89076073a54/extensions/git/dist/askpass-main.js', 'BROWSER': '/root/.windsurf-server/bin/69a900001328c5e276063fc33dcff89076073a54/bin/helpers/browser.sh', 'PATH': '/root/.windsurf-server/bin/69a900001328c5e276063fc33dcff89076073a54/bin/remote-cli:/usr/local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin', 'FLASK_ENV': 'development', 'OLDPWD': '/root/.windsurf-server/bin/69a900001328c5e276063fc33dcff89076073a54', 'TERM_PROGRAM': 'vscode', 'VSCODE_IPC_HOOK_CLI': '/tmp/vscode-ipc-fff2803b-172d-4770-8546-ab12c2b7e424.sock', '_': '/usr/local/bin/pytest', 'PYTEST_VERSION': '8.3.5'}
============================= test session starts ==============================
platform linux -- Python 3.11.12, pytest-8.3.5, pluggy-1.5.0
rootdir: /app
plugins: base-url-2.1.0, playwright-0.4.4
collected 1 item

tests/test_ui_playwright_roles.py FLASK APP STARTED: TESTING = True ENV = {'COLORTERM': 'truecolor', 'PYTHON_SHA256': '849da87af4df137710c1796e276a955f7a85c9f971081067c8f565d15c352a09', 'TERM_PROGRAM_VERSION': '1.97.0', 'HOSTNAME': 'f11cc52a690f', 'PYTHON_VERSION': '3.11.12', 'SSH_AUTH_SOCK': '/root/.windsurf-server/.69a900001328c5e276063fc33dcff89076073a54-ssh-auth.sock', 'PWD': '/app', 'FLASK_RUN_RELOAD': 'true', 'VSCODE_GIT_ASKPASS_NODE': '/root/.windsurf-server/bin/69a900001328c5e276063fc33dcff89076073a54/node', 'HOME': '/root', 'LANG': 'C.UTF-8', 'REMOTE_CONTAINERS': 'true', 'GPG_KEY': 'A035C8C19219BA821ECEA86B64E628F8D684696D', 'GIT_ASKPASS': '/root/.windsurf-server/bin/69a900001328c5e276063fc33dcff89076073a54/extensions/git/dist/askpass.sh', 'VSCODE_GIT_ASKPASS_EXTRA_ARGS': '', 'TERM': 'xterm-256color', 'VSCODE_GIT_IPC_HANDLE': '/tmp/vscode-git-0c9406c158.sock', 'FLASK_APP': 'app.py', 'SHLVL': '1', 'PAGER': 'cat', 'VSCODE_GIT_ASKPASS_MAIN': '/root/.windsurf-server/bin/69a900001328c5e276063fc33dcff89076073a54/extensions/git/dist/askpass-main.js', 'BROWSER': '/root/.windsurf-server/bin/69a900001328c5e276063fc33dcff89076073a54/bin/helpers/browser.sh', 'PATH': '/root/.windsurf-server/bin/69a900001328c5e276063fc33dcff89076073a54/bin/remote-cli:/usr/local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin', 'FLASK_ENV': 'development', 'OLDPWD': '/root/.windsurf-server/bin/69a900001328c5e276063fc33dcff89076073a54', 'TERM_PROGRAM': 'vscode', 'VSCODE_IPC_HOOK_CLI': '/tmp/vscode-ipc-fff2803b-172d-4770-8546-ab12c2b7e424.sock', '_': '/usr/local/bin/pytest', 'PYTEST_VERSION': '8.3.5', 'PYTEST_CURRENT_TEST': 'tests/test_ui_playwright_roles.py::test_role_management_ui (setup)', 'E2E_TEST': '1', 'FLASK_TESTING': '1'}
 * Serving Flask app 'app'
 * Debug mode: off
[31m[1mWARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.[0m
 * Running on http://127.0.0.1:5000
[33mPress CTRL+C to quit[0m
127.0.0.1 - - [22/Apr/2025 23:45:44] "GET /auth HTTP/1.1" 200 -
127.0.0.1 - - [22/Apr/2025 23:45:45] "GET /auth HTTP/1.1" 200 -
127.0.0.1 - - [22/Apr/2025 23:45:45] "[31m[1mPOST /signup HTTP/1.1[0m" 400 -
[DEBUG] Before server start: Checking port 5000...
[DEBUG] Before server start: Port 5000 is FREE.
[DEBUG] After server start: Checking port 5000...
[DEBUG] After server start: Port 5000 is FREE.
[DEBUG] Test start: Checking port 5000...
[DEBUG] Test start: Port 5000 is IN USE: [Errno 98] Address already in use
[DEBUG] Before admin signup: Checking port 5000...
[DEBUG] Before admin signup: Port 5000 is IN USE: [Errno 98] Address already in use
DEBUG: Users with email admin2@example.com before signup: [('admin2@example.com',)]
DEBUG: signup page HTML before filling: <!DOCTYPE html><html lang="en"><head>
  <meta charset="UTF-8">
  <title>Home Inventory</title>
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css">
</head>
<body>
  <nav class="navbar navbar-expand-lg navbar-light bg-light mb-4">
    <div class="container-fluid">
      <a class="navbar-brand" href="/">Home Inventory</a>
      <div>
        <a class="nav-link d-inline" href="/web/locations">Locations</a>
        <a class="nav-link d-inline" href="/web/master-items">Master Items</a>
        <a class="nav-link d-inline" href="/web/inventory">Inventory</a>
        <a class="nav-link d-inline" href="/web/stores">Stores</a>
        <a class="nav-link d-inline" href="/web/aisles">Aisles</a>
        <a class="nav-link d-inline" href="/web/shopping-list">Shopping List</a>
        
          <a class="nav-link d-inline" href="/auth">Login</a>
        
      </div>
    </div>
  </nav>
  <div class="container">
    
<div class="row justify-content-center">
  <div class="col-md-6 col-lg-5">
    <ul class="nav nav-tabs mb-3" id="authTabs" role="tablist">
      <li class="nav-item" role="presentation">
        <button class="nav-link" id="login-tab" data-bs-toggle="tab" data-bs-target="#login" type="button" role="tab" aria-selected="false" tabindex="-1">Login</button>
      </li>
      <li class="nav-item" role="presentation">
        <button class="nav-link active" id="signup-tab" data-bs-toggle="tab" data-bs-target="#signup" type="button" role="tab" aria-selected="true">Sign Up</button>
      </li>
    </ul>
    <div class="tab-content" id="authTabsContent">
      <div class="tab-pane fade show" id="login" role="tabpanel" aria-labelledby="login-tab">
        <form id="loginForm" method="post">
          <div class="mb-3">
            <label for="loginEmail" class="form-label">Email</label>
            <input type="email" class="form-control" id="loginEmail" name="email" required="">
          </div>
          <div class="mb-3">
            <label for="loginPassword" class="form-label">Password</label>
            <input type="password" class="form-control" id="loginPassword" name="password" required="">
          </div>
          <button class="btn btn-primary w-100" type="submit">Login</button>
          <div id="loginError" class="alert alert-danger mt-3 d-none"></div>
        </form>
      </div>
      <div class="tab-pane fade active" id="signup" role="tabpanel" aria-labelledby="signup-tab">
        <form id="signupForm" method="post">
          <div class="mb-3">
            <label for="signupEmail" class="form-label">Email</label>
            <input type="email" class="form-control" id="signupEmail" name="email" required="">
          </div>
          <div class="mb-3">
            <label for="signupPassword" class="form-label">Password</label>
            <input type="password" class="form-control" id="signupPassword" name="password" required="">
          </div>
          <div class="mb-3">
            <label for="signupFamily" class="form-label">Family Name <small class="text-muted">(optional if joining by invite)</small></label>
            <input type="text" class="form-control" id="signupFamily" name="family_name">
          </div>
          <div class="mb-3">
            <label for="signupInvite" class="form-label">Invitation Token <small class="text-muted">(optional, if joining by invite)</small></label>
            <input type="text" class="form-control" id="signupInvite" name="invite_token">
          </div>
          <button class="btn btn-success w-100" type="submit">Sign Up</button>
          <div id="signupError" class="alert alert-danger mt-3 d-none"></div>
          
        </form>
      </div>
    </div>
  </div>
</div>
<script>
const loginForm = document.getElementById('loginForm');
const signupForm = document.getElementById('signupForm');
loginForm.onsubmit = async (e) => {
  e.preventDefault();
  const email = loginForm.email.value;
  const password = loginForm.password.value;
  const resp = await fetch('/login', {
    method: 'POST',
    headers: {'Content-Type': 'application/json'},
    body: JSON.stringify({email, password})
  });
  if (resp.ok) {
    window.location = '/family';
  } else {
    const data = await resp.json();
    document.getElementById('loginError').textContent = data.error;
    document.getElementById('loginError').classList.remove('d-none');
  }
};
signupForm.onsubmit = async (e) => {
  e.preventDefault();
  const email = signupForm.email.value;
  const password = signupForm.password.value;
  const family_name = signupForm.family_name.value;
  const invite_token = signupForm.invite_token.value;
  const payload = {email, password};
  if (family_name) payload.family_name = family_name;
  if (invite_token) payload.invite_token = invite_token;
  const resp = await fetch('/signup', {
    method: 'POST',
    headers: {'Content-Type': 'application/json'},
    body: JSON.stringify(payload)
  });
  if (resp.ok) {
    window.location = '/family';
  } else {
    const data = await resp.json();
    document.getElementById('signupError').textContent = data.error;
    document.getElementById('signupError').classList.remove('d-none');
  }
};
</script>

  </div>

<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
</body></html>
DEBUG: <input> for #signupEmail: ['<input type="email" class="form-control" id="signupEmail" name="email" required="">']
DEBUG: Attributes for #signupEmail input: [('type', 'email', ''), ('class', 'form-control', ''), ('id', 'signupEmail', ''), ('name', 'email', ''), ('required', '', '')]
DEBUG: <input> for #signupPassword: ['<input type="password" class="form-control" id="signupPassword" name="password" required="">']
DEBUG: Attributes for #signupPassword input: [('type', 'password', ''), ('class', 'form-control', ''), ('id', 'signupPassword', ''), ('name', 'password', ''), ('required', '', '')]
DEBUG: <input> for #signupFamily: ['<input type="text" class="form-control" id="signupFamily" name="family_name">']
DEBUG: Attributes for #signupFamily input: [('type', 'text', ''), ('class', 'form-control', ''), ('id', 'signupFamily', ''), ('name', 'family_name', '')]
DEBUG: signupEmail editable: True
DEBUG: signupPassword editable: True
DEBUG: signupFamily editable: True
DEBUG signup page content: <!DOCTYPE html><html lang="en"><head>
  <meta charset="UTF-8">
  <title>Home Inventory</title>
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css">
</head>
<body>
  <nav class="navbar navbar-expand-lg navbar-light bg-light mb-4">
    <div class="container-fluid">
      <a class="navbar-brand" href="/">Home Inventory</a>
      <div>
        <a class="nav-link d-inline" href="/web/locations">Locations</a>
        <a class="nav-link d-inline" href="/web/master-items">Master Items</a>
        <a class="nav-link d-inline" href="/web/inventory">Inventory</a>
        <a class="nav-link d-inline" href="/web/stores">Stores</a>
        <a class="nav-link d-inline" href="/web/aisles">Aisles</a>
        <a class="nav-link d-inline" href="/web/shopping-list">Shopping List</a>
        
          <a class="nav-link d-inline" href="/auth">Login</a>
        
      </div>
    </div>
  </nav>
  <div class="container">
    
<div class="row justify-content-center">
  <div class="col-md-6 col-lg-5">
    <ul class="nav nav-tabs mb-3" id="authTabs" role="tablist">
      <li class="nav-item" role="presentation">
        <button class="nav-link" id="login-tab" data-bs-toggle="tab" data-bs-target="#login" type="button" role="tab" aria-selected="false" tabindex="-1">Login</button>
      </li>
      <li class="nav-item" role="presentation">
        <button class="nav-link active" id="signup-tab" data-bs-toggle="tab" data-bs-target="#signup" type="button" role="tab" aria-selected="true">Sign Up</button>
      </li>
    </ul>
    <div class="tab-content" id="authTabsContent">
      <div class="tab-pane fade" id="login" role="tabpanel" aria-labelledby="login-tab">
        <form id="loginForm" method="post">
          <div class="mb-3">
            <label for="loginEmail" class="form-label">Email</label>
            <input type="email" class="form-control" id="loginEmail" name="email" required="">
          </div>
          <div class="mb-3">
            <label for="loginPassword" class="form-label">Password</label>
            <input type="password" class="form-control" id="loginPassword" name="password" required="">
          </div>
          <button class="btn btn-primary w-100" type="submit">Login</button>
          <div id="loginError" class="alert alert-danger mt-3 d-none"></div>
        </form>
      </div>
      <div class="tab-pane fade active show" id="signup" role="tabpanel" aria-labelledby="signup-tab">
        <form id="signupForm" method="post">
          <div class="mb-3">
            <label for="signupEmail" class="form-label">Email</label>
            <input type="email" class="form-control" id="signupEmail" name="email" required="">
          </div>
          <div class="mb-3">
            <label for="signupPassword" class="form-label">Password</label>
            <input type="password" class="form-control" id="signupPassword" name="password" required="">
          </div>
          <div class="mb-3">
            <label for="signupFamily" class="form-label">Family Name <small class="text-muted">(optional if joining by invite)</small></label>
            <input type="text" class="form-control" id="signupFamily" name="family_name">
          </div>
          <div class="mb-3">
            <label for="signupInvite" class="form-label">Invitation Token <small class="text-muted">(optional, if joining by invite)</small></label>
            <input type="text" class="form-control" id="signupInvite" name="invite_token">
          </div>
          <button class="btn btn-success w-100" type="submit">Sign Up</button>
          <div id="signupError" class="alert alert-danger mt-3">Email already registered</div>
          
        </form>
      </div>
    </div>
  </div>
</div>
<script>
const loginForm = document.getElementById('loginForm');
const signupForm = document.getElementById('signupForm');
loginForm.onsubmit = async (e) => {
  e.preventDefault();
  const email = loginForm.email.value;
  const password = loginForm.password.value;
  const resp = await fetch('/login', {
    method: 'POST',
    headers: {'Content-Type': 'application/json'},
    body: JSON.stringify({email, password})
  });
  if (resp.ok) {
    window.location = '/family';
  } else {
    const data = await resp.json();
    document.getElementById('loginError').textContent = data.error;
    document.getElementById('loginError').classList.remove('d-none');
  }
};
signupForm.onsubmit = async (e) => {
  e.preventDefault();
  const email = signupForm.email.value;
  const password = signupForm.password.value;
  const family_name = signupForm.family_name.value;
  const invite_token = signupForm.invite_token.value;
  const payload = {email, password};
  if (family_name) payload.family_name = family_name;
  if (invite_token) payload.invite_token = invite_token;
  const resp = await fetch('/signup', {
    method: 'POST',
    headers: {'Content-Type': 'application/json'},
    body: JSON.stringify(payload)
  });
  if (resp.ok) {
    window.location = '/family';
  } else {
    const data = await resp.json();
    document.getElementById('signupError').textContent = data.error;
    document.getElementById('signupError').classList.remove('d-none');
  }
};
</script>

  </div>

<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
</body></html>
DEBUG signup error text: Email already registered
[DEBUG] Test end: Checking port 5000...
[DEBUG] Test end: Port 5000 is IN USE: [Errno 98] Address already in use
F[DEBUG] After server stop: Checking port 5000...
[DEBUG] After server stop: Port 5000 is FREE.


=================================== FAILURES ===================================
___________________________ test_role_management_ui ____________________________

flask_server = None

    def test_role_management_ui(flask_server):
        debug_port_5000_state("Test start")
        with sync_playwright() as p:
            browser = p.chromium.launch()
            page = browser.new_page()
            try:
                debug_port_5000_state("Before admin signup")
                # DEBUG: Check if user already exists before signup
                import sqlite3
                import os as _os
                db_path = _os.path.join(_os.path.dirname(__file__), '../instance/test.db')
                if _os.path.exists(db_path):
                    with sqlite3.connect(db_path) as conn:
                        cur = conn.cursor()
                        cur.execute("SELECT email FROM user WHERE email=?", ("admin2@example.com",))
                        rows = cur.fetchall()
                        print("DEBUG: Users with email admin2@example.com before signup:", rows)
                else:
                    print("DEBUG: test.db does not exist before signup")
                # Admin signup
                page.goto("http://localhost:5000/auth")
                page.wait_for_url("**/auth")
                # Activate the signup tab and ensure it's visible (Bootstrap tab logic)
                page.click("#signup-tab")
                page.wait_for_selector("#signup", state="visible")  # Wait for tab content
                page.wait_for_selector("#signupForm", state="visible")
                # DEBUG: print page HTML before filling
                html_before = page.content()
                print('DEBUG: signup page HTML before filling:', html_before)
                # Extract input fields for analysis
                import re
                for field in ["signupEmail", "signupPassword", "signupFamily"]:
                    matches = re.findall(rf'<input[^>]*id=["\']{field}["\'][^>]*>', html_before)
                    print(f'DEBUG: <input> for #{field}:', matches)
                    if matches:
                        # Print all attributes for the input
                        attrs = re.findall(r'(\w+)=(?:"([^"]*)"|\'([^\']*)\')', matches[0])
                        print(f'DEBUG: Attributes for #{field} input:', attrs)
                # Ensure fields are editable
                print('DEBUG: signupEmail editable:', page.is_editable("#signupEmail"))
                print('DEBUG: signupPassword editable:', page.is_editable("#signupPassword"))
                print('DEBUG: signupFamily editable:', page.is_editable("#signupFamily"))
                page.fill("#signupEmail", "admin2@example.com")
                page.fill("#signupPassword", "pw1234")
                page.fill("#signupFamily", "RoleFamUI")
                page.click("#signupForm button[type=submit]")
                # Print error if signup fails
                try:
>                   page.wait_for_url("**/family", timeout=5000)

tests/test_ui_playwright_roles.py:107: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.11/site-packages/playwright/sync_api/_generated.py:8807: in wait_for_url
    self._sync(
/usr/local/lib/python3.11/site-packages/playwright/_impl/_page.py:524: in wait_for_url
    return await self._main_frame.wait_for_url(**locals_to_params(locals()))
/usr/local/lib/python3.11/site-packages/playwright/_impl/_frame.py:233: in wait_for_url
    async with self.expect_navigation(
/usr/local/lib/python3.11/site-packages/playwright/_impl/_event_context_manager.py:33: in __aexit__
    await self._future
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    async def continuation() -> Optional[Response]:
>       event = await waiter.result()
E       playwright._impl._errors.TimeoutError: Timeout 5000ms exceeded.
E       =========================== logs ===========================
E       waiting for navigation to "**/family" until 'load'
E       ============================================================

/usr/local/lib/python3.11/site-packages/playwright/_impl/_frame.py:208: TimeoutError
=========================== short test summary info ============================
FAILED tests/test_ui_playwright_roles.py::test_role_management_ui - playwrigh...
============================== 1 failed in 10.76s ==============================
